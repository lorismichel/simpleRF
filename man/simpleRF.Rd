% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simpleRF.R
\name{simpleRF}
\alias{simpleRF}
\title{simpleRF}
\usage{
simpleRF(formula, data, num_trees = 50, mtry = NULL, min_node_size = NULL,
  replace = TRUE, probability = FALSE, splitrule = NULL,
  unordered_factors = "ignore", multiclass_mode = "old", num_threads = 1)
}
\arguments{
\item{formula}{Object of class \code{formula} or \code{character} describing the model to fit.}

\item{data}{Training data of class \code{data.frame}.}

\item{num_trees}{Number of trees.}

\item{mtry}{Number of variables to possibly split at in each node.}

\item{min_node_size}{Minimal node size. Default 1 for classification, 5 for regression, 3 for survival and 10 for probability estimation.}

\item{replace}{Sample with replacement. Default TRUE.}

\item{probability}{Grow a probability forest. Default FALSE.}

\item{splitrule}{Splitrule to use in trees. Default "Gini" for classification and probability forests, "Variance" for regression forests and "Logrank" for survival forests.}

\item{unordered_factors}{How to handle unordered factor variables. One of "ignore", "order_once", "order_split" and "partition" with default "ignore".}

\item{num_threads}{Number of threads used for mclapply, set to 1 for debugging.}
}
\description{
Implements Random Forests (Breiman 2001) with emphasis on simplicity. 
Uses reference classes and only plain \code{R}. 
Not optimized for computation speed. 
Allows rapid prototyping of RF-type algorithms.
}
\details{
Unordered factor variables can be handled in different ways. 
Use "ignore" to treat them as ordered in the order of the factor levels. 
With "order_once" and "order_split" they are ordered by their response values. For "order_once" this is done once before the analysis, for "order_split" this is done in each split.
With "partition" all 2-partitions of the factor levels are considered for splitting.
}
\examples{
\donttest{
library(simpleRF)

# Classification
simpleRF(Species ~ ., iris)

# Prediction
train_idx <- sample(nrow(iris), 2/3 * nrow(iris))
iris_train <- iris[train_idx, ]
iris_test <- iris[-train_idx, ]
rf_iris <- simpleRF(Species ~ ., data = iris_train)
pred_iris <- rf_iris$predict(iris_test)
table(iris_test$Species, pred_iris)
}

}
\author{
Marvin N. Wright
}
\references{
Breiman, L. (2001). Random forests. Mach Learn, 45(1), 5-32. \cr
}

